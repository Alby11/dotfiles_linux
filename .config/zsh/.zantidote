# vim: filetype=zsh

[[ -e $ZSH_DEBUG ]] && ZSH_DEBUG_LOG_STARTFILE "${(%):-%N}"

# configurations prior antidote loading
# zstyle :omz:plugins:keychain options --quiet
# zstyle :omz:plugins:keychain agents gpg,ssh
# zstyle :omz:plugins:keychain identities id_ed25519 id_rsa
# zstyle :omz:plugins:ssh-agent agent-forwarding yes
# zstyle :omz:plugins:ssh-agent helper ssh-askpass

# Set the name of the static .zsh plugins file antidote will generate.
zsh_plugins="${ZDOTDIR}/.zsh_plugins.zsh"

# Configure Antidote plugin cache to improve performance
export ANTIDOTE_CACHE_DIR="${ZDOTDIR}/.cache/antidote"

# Install antidote if missing
if [[ ! -d ${ZDOTDIR}/.antidote ]]; then
    git clone --depth=1 https://github.com/mattmc3/antidote.git "${ZDOTDIR}/.antidote"
fi

# Ensure you have a .zsh_plugins.txt file where you can add plugins.
[[ -f ${zsh_plugins:r}.txt ]] || touch "${zsh_plugins:r}.txt"

# Lazy-load antidote.
fpath+=("${ZDOTDIR}/.antidote")
autoload -Uz "${fpath[-1]}/antidote"

# Antidote settings
zstyle ':antidote:bundle' use-friendly-names 'yes'
emulate -L zsh
setopt extendedglob

# Generate static file in a subshell when .zsh_plugins.txt is updated.
if [[ ! $zsh_plugins -nt ${zsh_plugins:r}.txt ]]; then
    (antidote bundle <"${zsh_plugins:r}.txt" >|"$zsh_plugins")
fi

# Source your static plugins file and get rid of it
source "$zsh_plugins" && rm "$zsh_plugins"

# Set oh-my-zsh path according to antidote installation
export ZSH=$(antidote path ohmyzsh/ohmyzsh)
export ZSH_CUSTOM="$ZSH"

# Define or ignore unhandled ZLE widgets before loading zsh-syntax-highlighting
zle -N menu-search || true
zle -N recent-paths || true

# Create aliases to simplify using Antidote
alias adu='antidote update'
alias adr='antidote reset'
alias adbu='antidote bundle'
alias adp='antidote path'

[[ -e $ZSH_DEBUG ]] && ZSH_DEBUG_LOG_ENDFILE "${(%):-%N}"
